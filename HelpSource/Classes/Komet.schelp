TITLE::Komet
SUMMARY::Main interface for the Komet system
CATEGORIES::Komet
RELATED::Classes/KometMainChain

DESCRIPTION::
This class is the main interface for the Komet system.

This is where you start the system and it contains most of the controls you need
to use.

Once you have the system started, see link::Guides/KometCookbook:: for usage
examples and link::Guides/KometIntro:: for a general introduction.

If you haven't run Komet before, please run code::Komet.install():: to install
all the plugins necessary.

NOTE::Komet won't boot at all if you haven't installed all the dependencies
correctly::

CLASSMETHODS::
METHOD::start
This method starts the Komet system and boots the server if it hasn't booted
already. It will optionally build all SynthDefs or alternatively load the ones
already built. It will also construct the default LINK::Classes/KometMainChain::
instances and populate them with the defaults.

You can start Komet without supplying any arguments to this method. If that's
the case, it will rely on the defaults in your link::Classes/KometConfig::
config file.

ARGUMENT::numChannelsOut
Number of output channels. Can either be an integer or a
link::Classes/HoaOrder::. If the former (an integer), it will be interpreted as
mono if 1, stereo if 2 and link::Classes/PanAz:: style multi channel above that.
If a link::Classes/HoaOrder:: is used, the system will go into High Order
Ambisonics mode.

ARGUMENT::build
Build all synthdefs

ARGUMENT::openGuiAfterInit
Open the link::Classes/Komet*gui:: after the system has started.

ARGUMENT::action
A function that will be evaluated when the system is ready.
If the function depends on the synths being fully set up, you need a fork and
serversync like so:
code::
(
Komet.start(
    2,
    true,
    action: {
        forkIfNeeded{
            Server.local.sync;
            KometMainChain(\main, [
                KometFXItem.new(
                    fxName:\hpf,
                    fxType:\channelized,
                    fxArgs:[]),
                ],
                Komet.numChannels
            )
        }
    }
)
)
::

argument::logLevel
Set the log level of the link::Classes/Log::ger used to post information. This
can be set in the gui as well. It is code::\debug:: by default. Set it it
code::\info:: if you want less verbosity.

METHOD::playSoundfile
Play a soundfile from disk

code::
var filename = "/Volumes/mads_roed_ssd1/å/renders/skitser/Å-skitse2_acn_n3d_7_220708_140400.wav";
var numChannels = 64;
Komet.playSoundfile(filename, numChannels, 'hoafreqshift', [\shiftfreq, 101]);
::

ARGUMENT::filename
A string containing a file name path
ARGUMENT::numFileChannels
Number of channels in file

ARGUMENT::withFX
An FX name. Should be the name of a link::Classes/KometSynthFuncDef::

ARGUMENT::fxArgs
Arguments to the fx synth

METHOD::numChannels
Number of output channels

METHOD::allChains
All LINK::Classes/KometMainChain::'s currently running.

METHOD::logLevel
ARGUMENT::level

METHOD::initClass

METHOD::install
Install the included faust plugins using link::Classes/Faust2SC:: and try to
install external plugins as well.

METHOD::uninstall
Remove the installed faust plugins from user's system and clean out all
synthdefs generated by Komet.

method::clean
Clean out all synthdefs generated by Komet.

METHOD::build
ARGUMENT::numChannelsOut

METHOD::browse
Browse all synths

METHOD::record
Start recording sound. This will put the server recorder in the correct spot
(after the code::KometMainChain(\main):: effect chain, and if in HOA mode before
the code::KometMainChain(\decoder):: decoder effect chain used for decoders).

METHOD::stopRecording
Stop recording

EXAMPLES::

CODE::
// Start the system in stereo mode
Komet.start(2, true);

// Start the system in 3rd order ambisonics mode
Komet.start(HoaOrder(3), true);
::
