TITLE::K_FaustInstaller
SUMMARY::Compile and install faust files as SuperCollider plugins
CATEGORIES::K_>Faust
RELATED::Classes/UGen

DESCRIPTION::
This compiles and installs STRONG::.dsp:: faust files to SuperCollider UGens and
installs them. You need to have Faust installed, at least version 2.40 which
includes the strong::faust2sc.py:: tool that is used in this class.

CLASSMETHODS::
METHOD::new
ARGUMENT::outputDir
The folder to which the plugins will be installed. Only write the head of the
path eg "MyFunkyFaust" - the class will put this in your userExtensions
directory.

ARGUMENT::sourcecodeDir
Folder containing your faust files

ARGUMENT::autoCompile
Automatically compile the plugins on initialization? If the outputDir already
exists, it will skip compilation.

This may be used to trigger automatic compilations in your packages if you add
it to the strong::initClass:: method of your class like so:

code::
MyFunkyFaustPlugins{
	*initClass{
		StartUp.add({
				// This will trigger compilation if it hasn't already been compiled
				K_FaustInstaller.new(
						// Will be compiled to extensions/MyFunkyFaustPlugins
						"MyFunkyFaustPlugins",
						// Source of faust files. RELATIVE
						sourcecodeDir: "relative/path/to/faust/files",
						// Trigger autocompile if folder does not exist
						autoCompile: true
						);
				})
	}
}
::
INSTANCEMETHODS::
METHOD::init
ARGUMENT::installTargetFolder
ARGUMENT::sourcecodeDir
ARGUMENT::autoCompile

METHOD::makeTargetFolder

METHOD::generateReadme

METHOD::install
This will compile and install the faust files in strong::sourcecodeDir::

METHOD::compileFile
ARGUMENT::faustFile

METHOD::uninstall

EXAMPLES::

CODE::

// Compile folder of faust files
(
var pathToFolderContainingFaustFiles = "TODO"; // <--- Put path to faust files here

var target = "K_SynthLibFaustPlugins";
var installer = K_FaustInstaller.new(target, pathToFolderContainingFaustFiles);
installer.install();
)

::
