TITLE::Komet cookbook
SUMMARY:: Different recipes for different things in Komet
CATEGORIES::Komet>Guides

SECTION:: Effect processing

SUBSECTION:: VST Plugin as main output fx

Put vst plugins in main fx chain and restore their state after cmd period

code::
// May be necessary
VSTPlugin.search();
(
s.boot;
Komet.start(numChannelsOut:2, build:true);
)
(
var pluginNames = [
    "TEOTE.vst3",
    "Elephant.vst3",
];

~pluginControllers = Array.newClear(pluginNames.size);
~pluginControllersParams = ~pluginControllersParams ?? {IdentityDictionary.new};

KometMainChain(\preMain,
    pluginNames.collect{
        KometFXItem.new(fxName:\vstpluginstereo, fxType:\stereo, fxArgs:[])
    }
, 2, 1);

~savePluginParams = {
    ~pluginControllers.do{|pgc|
        var name = pgc.info.key;

        "Saving params for %".format(name).postln;
        ~pluginControllersParams.put(name, Array.newClear(pgc.numParameters));
        pgc.numParameters.do{|ind|
            pgc.get(ind, {|val|
                ~pluginControllersParams[name][ind] = val;
            })
        }
    }
};

~autosaveSeconds = 30;

Tdef(\vst_param_saver, {
    loop {
        ~autosaveSeconds.wait;
        ~savePluginParams.value();
    }
});

~initVSTPlugins = {
    pluginNames.do{|vstname, fxIndex|
        var savedParams = ~pluginControllersParams[vstname.asSymbol] ?? [];

        "Adding vstplugin % to servertree".format(vstname).postln;

        ~pluginControllers[fxIndex] = VSTPluginController(
            KometMainChain(\preMain).data[fxIndex][\node]
        );

        // Tell the server to open this plugin in the synth
        ~pluginControllers[fxIndex].open(vstname, action: {
            var setArgs = savedParams.collect{|paramval, index| [index, paramval] }.flatten;

            // Open plugin gui
            ~pluginControllers[fxIndex].editor;

            // Set parameters to old values
            ~pluginControllers[fxIndex].set(*setArgs.postln);

            // Restart autosaver
            Tdef(\vst_param_saver).play;
        }, verbose: true);

    }
};

~initVSTPlugins.value();

ServerTree.add(~initVSTPlugins);

)
::

SUBSECTION:: VST plugin as main output fx with auto save of presets
Same as above but using presets instead (making them persistent between
reboots).

code::
// May be necessary
VSTPlugin.search();
(
s.boot;
Komet.start(numChannelsOut:2, build:true);
)
(
var pluginNames = [
    "TEOTE.vst3",
    "Elephant.vst3",
];

~sessionName = "myFunkysession";
~autosaveSeconds = 10; // Interval between autosaves

~pluginControllers = Array.newClear(pluginNames.size);

KometMainChain(\preMain,
    pluginNames.collect{
        KometFXItem.new(fxName:\vstpluginstereo, fxType:\stereo, fxArgs:[])
    }
, 2, 1);

~savePluginParams = {
    ~pluginControllers.do{|pgc|
        var vstname = pgc.info.key;
        var savePreset = ~sessionName ++ vstname;

        "Saving preset for %".format(vstname).postln;
        pgc.savePreset(savePreset);

    }
};

~autosaveSeconds = 30;

Tdef(\vst_param_saver, {
    loop {
        ~autosaveSeconds.wait;
        ~savePluginParams.value();
    }
});

~initVSTPlugins = {
    pluginNames.do{|vstname, fxIndex|
        var savedParams = ~pluginControllersParams[vstname.asSymbol] ?? [];

        "Adding vstplugin % to servertree".format(vstname).postln;

        ~pluginControllers[fxIndex] = VSTPluginController(
            KometMainChain(\preMain).data[fxIndex][\node]
        );

        // Tell the server to open this plugin in the synth
        ~pluginControllers[fxIndex].open(vstname, action: {
            var loadPreset = ~sessionName ++ vstname;

            // Open plugin gui
            ~pluginControllers[fxIndex].editor;

            if(~pluginControllers[fxIndex].info.findPreset(loadPreset).isNil.not, {
                // Set parameters to old values
                ~pluginControllers[fxIndex].loadPreset(loadPreset);
            });

            // Restart autosaver
            Tdef(\vst_param_saver).play;
        }, verbose: true);

    }
};

~initVSTPlugins.value();

ServerTree.add(~initVSTPlugins);

)
::

SECTION:: Patterns

SUBSECTION:: Complex drones

code::
// Setup
(
s.boot;
Komet.start(numChannelsOut:2, build:false);
)
(
Pbind(
    \type, \k,

    \base, \complex,
    \env, \adsr,
    \filter, \none,
    \category, \synthetic,

    \freq, Pwhite(100, 520),
    \freqOffset, 0.0,

    \dur, 8.0,
    \lagTime, 0.0,
    \legato, 2,

    \amp, 0.025,

    \modFreq, 100.0,
    \amMod, Pwhite(0.0,0.25),
    \fmMod, 0.2,
    \timbreMod, Pwhite(0.0,0.25),

    \modclip, 0.0,
    \modskew, 0.0,
    \modphase, 0.25,
    \mainclip, 0.5,
    \mainskew, 0.9,
    \mainphase, 1.25,

    \pan, Pwhite(-0.5,0.5),
    \panFreq, 1.0,
    \autopan, 0.0,
    \panShape, KPanShape.sine,

    \gate, 1.0,
    \atk, 0.5,
    \sus, 1,
    \rel, 0.5,
    \curve, Pwhite(-5,5),

).play;
)
::

SUBSECTION:: Complex drones through a filter

Same as above but using LINK::Classes/POutFX:: to route all the voices through a
filter. Change it to LINK::Classes/PparOutFX:: if you are on SuperNova.

code::
// Setup
(
s.boot;
Komet.start(numChannelsOut:2, build:false);
)
(
var sourcePattern = Pbind(
    \type, \k,

    \base, \complex,
    \env, \adsr,
    \filter, \none,
    \category, \synthetic,

    \freq, Pwhite(100, 520),
    \freqOffset, 0.0,

    \dur, 8.0,
    \lagTime, 0.0,
    \legato, 2,

    \amp, 0.025,

    \modFreq, 100.0,
    \amMod, Pwhite(0.0,0.25),
    \fmMod, 0.2,
    \timbreMod, Pwhite(0.0,0.25),

    \modclip, 0.0,
    \modskew, 0.0,
    \modphase, 0.25,
    \mainclip, 0.5,
    \mainskew, 0.9,
    \mainphase, 1.25,

    \pan, Pwhite(-0.5,0.5),
    \panFreq, 1.0,
    \autopan, 0.0,
    \panShape, KPanShape.sine,

    \gate, 1.0,
    \atk, 0.5,
    \sus, 1,
    \rel, 0.5,
    \curve, Pwhite(-5,5),

);

POutFX(
    sourcePattern: sourcePattern,
    fxDefName: KometFXFactory.get(\vadim, \channelized),
    fxArgPairs: [
        \dur, 10,
        \cutoff, Pwhite(100,250),
        \res, 0.5,
        \lagTime, Pkey(\dur),
    ],
    releaseTime: 10
).play;
)
::

SUBSECTION:: Control FX Chains using patterns

TODO
