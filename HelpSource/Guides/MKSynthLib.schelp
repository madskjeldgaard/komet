TITLE:: Notes on how to use M
SUMMARY:: Notes on how to use M
CATEGORIES:: Tutorials

SECTION:: Using M

A simple example:
CODE::
// Stereo output setup. Build all synths
K.new(numChannelsOut: 2, rebuild: true);

// Get def name for a complex oscillator synth
~synthName = M.get(basename:\complex, envType:\adsr, filterType:\ladder);

// Generate a pattern for it using all of it's arguments and post it in the post window
KGenPat(~synthName);
::

SECTION::Background

SUBSECTION:: Goals and intended uses of the system

SUBSECTION:: Overview of system

SUBSECTION:: components overview

SUBSECTION:: Terminology

A strong::synth:: (found in the  EMPHASIS::synth:: subfolder) is a sound source without panning, filtering and vca envelopes. This could for example be a definition of an oscillator function and nothing else.

A strong::component:: (found in the  EMPHASIS::components:: subfolder) is a building block used for constructing the final synth def using the synth function and these components. Components include envelopes, filters, grain shapes etc.

SECTION::Panning/spatialization

Panning methods are automatically chosen and built into the synths that are constructed by the library when you initialize it. Each algorithm comes with an auto panning algorithm as well (for 3D panners/encoders this number is two: One for azimuth and one for elevation).

SUBSECTION:: Auto panner

To be able to easily animate a panning using simple modulation, all of the panning algorithms come with a simple auto panning algorithm baked in. This is handled by the class LINK::Classes/KAutoPan:: which is a small pseudo ugen.

SUBSECTION:: Panning resolution

The number of channels you choose when you build the library has an effect on the choice of panning algorithm chosen for the sources. In conjunction with the number of channels output by the synth function, a number of different panning algorithms are selected by the system. All of this happens internally in the CODE::KPanners.choosePanAlgo:: method.

In the table below, you will see the matrix of choices made by the system when faced with the values for the number of outputs of the system and the number of outputs of the source synth function (confusingly named numChannelsIn):

TABLE::
	## strong::numChannelsOut (of system):: || strong::numChannelsIn (from synth func):: || strong::panning algorithm:: || strong::class/method:: || strong::output::
	## 1 || 1 || code::\mono2mono:: || none (pass through) || mono
	## 1 || 2 || code::\stereo2mono:: || .sum || mono
	## 2 || 1 || code::\mono2stereo:: || LINK::Classes/Pan2:: || stereo
	## 2 || 2 || code::\stereo2stereo:: || LINK::Classes/Balance2:: || stereo
	## >2 || 1 || code::\mono2azimuth:: || LINK::Classes/PanAz:: || multichannel azimuth
	## >2 || >1 || code::\multi2azimuth:: || LINK::Classes/SplayAz:: || multichannel azimuth
	## \O1 || 1 || code::\mono2hoaO1:: || LINK::Classes/HoaEncodeDirection:: || LINK::Classes/AtkHoa::
	## \O2 || 1 || code::\mono2hoaO2:: || LINK::Classes/HoaEncodeDirection:: || LINK::Classes/AtkHoa::
	## \O3 || 1 || code::\mono2hoaO3:: || LINK::Classes/HoaEncodeDirection:: || LINK::Classes/AtkHoa::
	## \O4 || 1 || code::\mono2hoaO4:: || LINK::Classes/HoaEncodeDirection:: || LINK::Classes/AtkHoa::
	## \O5 || 1 || code::\mono2hoaO5:: || LINK::Classes/HoaEncodeDirection:: || LINK::Classes/AtkHoa::
	## \O6 || 1 || code::\mono2hoaO6:: || LINK::Classes/HoaEncodeDirection:: || LINK::Classes/AtkHoa::
	## \O7 || 1 || code::\mono2hoaO7:: || LINK::Classes/HoaEncodeDirection:: || LINK::Classes/AtkHoa::
	## \O1 || 2 || code::\stereo2hoaO1:: || LINK::Classes/HoaEncodeDirection:: || LINK::Classes/AtkHoa::
	## \O2 || 2 || code::\stereo2hoaO2:: || LINK::Classes/HoaEncodeDirection:: || LINK::Classes/AtkHoa::
	## \O3 || 2 || code::\stereo2hoaO3:: || LINK::Classes/HoaEncodeDirection:: || LINK::Classes/AtkHoa::
	## \O4 || 2 || code::\stereo2hoaO4:: || LINK::Classes/HoaEncodeDirection:: || LINK::Classes/AtkHoa::
	## \O5 || 2 || code::\stereo2hoaO5:: || LINK::Classes/HoaEncodeDirection:: || LINK::Classes/AtkHoa::
	## \O6 || 2 || code::\stereo2hoaO6:: || LINK::Classes/HoaEncodeDirection:: || LINK::Classes/AtkHoa::
	## \O7 || 2 || code::\stereo2hoaO7:: || LINK::Classes/HoaEncodeDirection:: || LINK::Classes/AtkHoa::
::

SUBSECTION:: The panning algorithms in practical use

static panning
static 3d panning
autopanning
offsetting the autopan
autopan shape
3d panning

SECTION:: Named controls

LINK::Classes/K_NC::

SUBSECTION:: How to add a synth

code::
(
K.add("vosim", {|dur|
	VosimOsc.ar(
		freq: K_NC.kr("freq", 100),
		form1freq: K_NC.kr("form1freq", 1054, spec: Spec.specs[\freq]),
		form2freq: K_NC.kr("form2freq", 454, spec: Spec.specs[\freq]),
		shape: K_NC.kr("shape", 0, spec: [-1.0,1.0])
	);

	}, numChannelsIn: 1);
)
::

SUBSECTION:: How to add a component

SECTION:: NRT

code::
(
var server = Server(\nrt,
    options: ServerOptions.new
	.maxSynthDefs_(20000)
	.memSize_(2048*1024)
	.blockSize_(1)
    .numOutputBusChannels_(2)
    .numInputBusChannels_(2)
);

var dur = 60;
var synth = M.get(\fb1, \adsr, \korg35);
var synthArgs = [delayscale: 20, autopan: 1, panShape: 2, fcutoff: 100];

a = Score([
    [0.0, (x = Synth.basicNew(synth, server, 1000)).newMsg(args: synthArgs)],
    [dur, x.freeMsg]
]);

a.recordNRT(
    outputFilePath: "~/nrt-help.wav".standardizePath,
    headerFormat: "wav",
    sampleFormat: "int16",
    options: server.options,
    duration: dur,
    action: { "done".postln }
);

server.remove;
)
::

KEYWORD:: findMe,andMe
