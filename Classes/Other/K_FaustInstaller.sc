/*

This class takes a folder containing faust files and compiles them to SuperCollider plugins including SuperNova plugins.

It places them in the user extensions folder in a folder defined in the installTargetFolder argument.

*/
K_FaustInstaller{
    classvar <>flags = "-double -vec";
    var installationFolder,sourcecodeFolder, fullCompilationPath, installationFolderHead;

    *new{|outputDir, sourcecodeDir, autoCompile=false|
        ^super.new.init(outputDir,sourcecodeDir, autoCompile);
    }

    // installTargetFolder is a folder in user extensions dir
    init{|installTargetFolder,sourcecodeDir, autoCompile|
        var faustFiles;
        sourcecodeFolder = sourcecodeDir;
        installationFolderHead = installTargetFolder;
        installationFolder = PathName(Platform.userExtensionDir) +/+ installTargetFolder;
        fullCompilationPath = installationFolder.fullPath;

        if(autoCompile, {
            this.autoCompile();
        });

    }

    // Create folder if needed
    makeTargetFolder{
        if(installationFolder.isFolder.not, {
            "%: Creating folder %".format(this.class.name, fullCompilationPath).postln;
            File.mkdir(fullCompilationPath);
        }, {
            "%: Did not create folder for Faust plugins. Already exists: %".format(this.class.name, fullCompilationPath).postln;
        });
    }

    // Create a sort of readme
    generateReadme{
        File((installationFolder +/+ "README.md").fullPath,"w")
        .write(
            "# %\nThese plugins were auto generated by % on %.".format(installationFolder, this.class.name, Date.getDate)
        ).close;
    }

    // Compile all faust files in this folder and install them
    install{
        var faustFilePath, faustFiles;
        var sourceFileFolderPath = sourcecodeFolder;
        // Check if faust2sc.py exists
        // FIXME: Only works on unix systems
        "command -v faust2sc.py" .unixCmd({ |res, pid|
            if(res == 0, {

                this.makeTargetFolder();
                this.generateReadme();

                faustFilePath = if(sourceFileFolderPath.isString, { PathName(sourceFileFolderPath)}, {
                    if(sourceFileFolderPath.isKindOf(PathName), {
                        sourceFileFolderPath
                    }, {
                        "%: sourceFileFolderPath is not a string or a PathName".format(this.class.name).error
                    })
                });

                faustFiles = faustFilePath.files;

                // Run installation/compilation command
                faustFiles.do{|faustFile|
                    this.compileFile(faustFile)
                };

                "-------\n\nDONE COMPILING FAUST FILES :)".postln;
            }, {
                "%: faust2sc.py not found. Are you sure it is installed?".format(
                    this.name
                ).error
            })
        })
    }

    compileFile{|faustFile|

        faustFile = if(faustFile.isKindOf(String), {
            PathName(faustFile)
        }, {
            if(faustFile.isKindOf(PathName), {
                faustFile
            }, {
                "%: % is not a pathname or string".format(faustFile, this.class.name)
            })
        });

        if(faustFile.extension == "dsp", {
            var cmd;
            var faustFilePath = faustFile.fullPath;
            "\n%: Compiling Faust file %".format(this.class.name, faustFilePath).postln;

            cmd = "cd %; faust2sc.py % -s -o % %".format(fullCompilationPath, faustFilePath, fullCompilationPath, flags);

            // Probably already exists but check anyway
            this.makeTargetFolder();

            // Run command
            cmd.systemCmd;
            "Done compiling %\n".format(faustFile.fileName).postln;

        }, {
            // "%: % is not a faust file. Skipping.".format(this.class.name, faustFile.fullPath).postln;
        })
    }

        autoCompile{
            if(installationFolder.isFolder, {
                // Already compiled
                "%: Faust files seemingly already installed.".format(installationFolderHead).postln
            }, {
                // Compile
                this.install(sourcecodeFolder);
            })
    }

    uninstall{
        if(installationFolder.isFolder.not, {
            "%: Cannot uninstall % - it does not exist".format(this.class.name, installationFolder.fullPath).error
        }, {
            "%: UNINSTALLING %".format(this.class.name, installationFolder.fullPath).postln;
            File.deleteAll(installationFolder.fullPath)
        })
    }
}
